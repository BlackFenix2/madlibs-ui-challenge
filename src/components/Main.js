// attempt to reset browser differences in default CSS
require('normalize.css/normalize.css');
// this file is where styles should go
require('styles/App.css');

// Flocabulary uses React extensively. This exercise is built with it
// but it is not required knowledge. Ideally, you will not have to
// alter any javascript. React comes with an HTML-like syntax
// called jsx, which you can alter much like HTML.
var React = require('react');

// We're going to use this open source forms library to create our
// madlib form
var t = require('tcomb-form');
var { Form } = t.form;

// These are lyrics to a Flocabulary song that has had some
// terms replaced for the purposes of the madlib. The terms that
// are wrapped in %&<term>&% will be our madlib blanks
var MADLIB_TEXT = `
Number One
Freedom of religion, speech, and %&your_favorite_right&%,
Plus you can assemble in crowds and %&verb&%.

Number Two
Right to bear arms and cannons,
I bet the Minutemen didn't know about handguns.

Number Three
When soldiers gets sleepy,
You don't have to let them sleep up on your %&noun&%.

Number Four
No one can search and seize. It protects me,
Unless people have a warrant to arrest me.

Number Five
If you arrest me, respect me.
Sorry, Alex, there's no Double Jeopardy.
What'd you do after school?
"I plead the fifth."
What'd you do after that, dude?
"I plead the fifth."
I don't have to incriminate myself or risk my health,
Whenever I'm in trouble, I just plead the fifth.

Number Six
You must process me %&word_ending_with_ly&%.

Number Seven
In front of my peers on the jury.

Number Eight
You can't use cruel or %&adjective&% punishment.
You can't make me drink %&liquid&% for the fun of it.

Number Nine
The people get more than these rights.

Number %&number&%
States can make other laws, and they just might.

This is the Bill of Rights.
`;

var MADLIB_REGEXP = /%&(.*?)&%/gi;

var AppComponent = React.createClass({
  getInitialState: function() {
    return {
      submittedValue: null
    };
  },
  getDefaultProps: function() {
    return {
      text: MADLIB_TEXT
    };
  },
  reset: function() {
    this.setState(this.getInitialState());
  },
  render: function() {
    var content = (
      this.state.submittedValue
      ? (
          <SubmittedMadlib
            reset={this.reset}
            text={this.props.text}
            value={this.state.submittedValue}
          />
        )
      : (
          <MadlibForm
            text={this.props.text}
            onSubmit={
              value => this.setState({submittedValue: value})
            }
          />
        )
    );


    return (
      // this is the `jsx` syntax that React gives us. You can edit it just
      // like HTML. just be careful! use `className='some-class'` instead of
      // `class='some-class'`. The other thing is that if you say, wanted to
      // make a sibling element of "div.main", then you'd have to wrap both
      // elements with another <div>.
      <div className="main">
        <h1>FLOCABULARY MADLIB</h1>
        {content}
      </div>
    );
  }
});

var MadlibForm = React.createClass({
  // this is the function that renders the form. most of the HTML
  // is generated by the forms library, so you're pretty much stuck to
  // how they format it.
  render: function() {
    return (
      <div>
        <h2>Fill out the form below to create your madlib</h2>
        <form onSubmit={this.onSubmit}>
          <Form
            ref="form"
            onChange={this.onChange}
            value={this.state.value}
            type={this.state.type}
            options={this.state.options}
          />
          <button type="submit">Make your mad lib!</button>
        </form>
      </div>
    );
  },
  // you probably shouldn't have to touch any of the other functions
  // on this class
  getInitialState: function() {
    var inputs = {};
    var result;

    t.String.getValidationErrorMessage = (value, path) => {
      if (!value) {
        return 'This field is required.';
      }
      if (path[0] === 'word_ending_with_ly' && !value.endsWith('ly')) {
        return 'This word must end with "ly"';
      }
    }

    while (result = MADLIB_REGEXP.exec(this.props.text)) {
      var fieldType;
      if (result[1] === 'word_ending_with_ly') {
        fieldType = t.refinement(t.String, s => s.endsWith('ly'));
      } else if (result[1] === 'number') {
        fieldType = t.Number;
      } else {
        fieldType = t.String;
      }

      inputs[result[1]] = fieldType;
    }

    return {
      type: t.struct(inputs),
      options: {
        fields: {
          number: {
            type: 'number'
          }
        }
      },
      value: {},
      submitted: false
    };
  },
  onSubmit: function(event) {
    event.preventDefault();
    if (this.formsAreValid()) {
      this.props.onSubmit(this.getFormValues());
    }
  },
  onChange: function(value, path) {
    this.setState(
      { value: value },
      () => {
        this.refs.form.getComponent(path).validate();
      }
    );
  },
  formsAreValid: function() {
    return !this.refs.form.validate().errors.length;
  },
  getFormValues: function() {
    return this.refs.form.getValue();
  }
});

var SubmittedMadlib = React.createClass({

  render: function() {
    var filledInMadlib = this.getFilledInMadlib();

    return (
      // this is what creates the displayed finished
      // madlib
      <div>
        <h2>Your madlib:</h2>
        <button
          onClick={this.props.reset}
        >
          Go back
        </button>
        <div>
          {filledInMadlib}
        </div>
      </div>
    );
  },

  getFilledInMadlib: function() {

    return this.props.text.split('\n').map(
      (line, i) => (
        <span
          // don't worry about this `key` attribute
          key={`madlibline${i}`}
          className='madlib-line'
        >
          {
            line.split(MADLIB_REGEXP).map(
              chunk => (
                <span
                  // don't worry about this `key` attribute
                  key={`${chunk}${i}`}
                  className={
                    this.props.value[chunk]
                    ? 'user-submitted-value'
                    : ''
                  }
                >
                  {
                    this.props.value[chunk]
                    ? this.props.value[chunk]
                    : chunk
                  }
                </span>
              )
            )
          }
        </span>
      )
    )
  }
});

module.exports = AppComponent;
